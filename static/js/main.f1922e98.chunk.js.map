{"version":3,"sources":["components/PlayerChat.js","components/ConvoApp.js","reportWebVitals.js","index.js"],"names":["PlayerChat","state","botResponse","userHistory","botHistory","currentBranch","props","scenarioTrees","commentary","watson","userChoice","setState","userStatement","handleClickReset","ev","preventDefault","this","Container","Row","Col","className","Card","style","color","paddingTop","paddingLeft","Body","Title","Object","keys","map","key","choice","onClick","Text","xs","order","Button","React","Component","ConvoApp","sm","tutorial","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","A","AA","AAA","AAB","AB","ABA","ABB","B","BA","BAA","BAB","BB","BBA","BBB","document","getElementById"],"mappings":"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","file":"static/js/main.f1922e98.chunk.js","sourcesContent":["import React from 'react';\nimport '../index.css';\n\n// Bootstrap\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\n\nconst BASE_URL = 'http://localhost:3001/watson'\n\n\nclass PlayerChat extends React.Component {\n    \n    state = {\n        botResponse: 'Samantha.AI is helping itself to a cup of coffee when you approach...',\n        userHistory: [],\n        botHistory: [],\n        currentBranch: this.props.scenarioTrees,\n        commentary: [],\n        watson: []\n      }\n   \n       userChoice = (userChoice) => {\n            \n            const scenario = this.props.scenarioTrees;\n\n            this.setState({\n                userHistory: [...this.state.userHistory, this.state.currentBranch[userChoice].userStatement],\n                currentBranch: this.state.currentBranch[userChoice],\n                botResponse: this.state.currentBranch[userChoice].botResponse,\n                commentary: [...this.state.commentary, this.state.currentBranch[userChoice].commentary]\n            });\n\n            // perform an axios via a fetch function\n            // fetchWatson = () => {\n            //     axios.get(BASE_URL,{\n            //         params: 'this is a test string'\n            //     })\n            //     .then(res => {\n            //         // create a variable that extracts the json data, convert to strings and then set the state\n            //         this.setState({\n            //             watson: [...this.state.watson, //variable]\n            //         })\n            //     })\n            // };\n\n        } // userChoice()\n\n        handleClickReset = (ev) => {\n            ev.preventDefault();\n            this.setState({botResponse: 'Samantha.AI is helping itself to a cup of coffee when you approach...'});\n            this.setState({userHistory: []});\n            this.setState({botHistory: []});\n            this.setState({currentBranch: this.props.scenarioTrees});\n            this.setState({commentary: []});\n        };\n\n\n    render(){\n\n        const {userHistory, currentBranch, botHistory, commentary} = this.state\n\n        return(\n            <div>\n                <Container>\n                    <Row>\n                        <Col>\n                        <div className=\"chatBox\">\n                            <div className=\"botChat\">\n                                \n                                <h3>Samantha.AI will respond to your statements</h3>\n                            </div>\n                            <Card className=\"mb-3\" style={{color: \"#000\", paddingTop: \"1%\", paddingLeft: \"1%\", color: \"#6610f2\", fontSize: \"14pt\"}}>\n                            <div className=\"botResponse\">\n                                <p>{this.state.botResponse}</p>\n                            </div>\n                            </Card>\n                        </div>\n                        </Col>\n                    </Row>\n                    <Row>\n                    <Col>\n                    <div className=\"playerChat\">\n                        <Card className=\"mb-3\" style={{color: \"#000\"}}>\n                            <Card.Body>\n                                <Card.Title>\n                                    Choose what you think is the right thing to say:\n                                </Card.Title>\n                            \n                        <div className=\"playerChoices\">\n                            {\n                                Object.keys(currentBranch).map(key => {\n                                    const choice = currentBranch[key];\n                                    return (\n                                        <div onClick={() => this.userChoice(key)}>\n                                            <Card.Text><p>{choice.userStatement}</p></Card.Text>\n                                        </div>\n                                    );\n                                })\n                            }\n                            </div>        \n                        </Card.Body>\n                        </Card>\n                      </div>\n                    </Col>\n                    <Col>\n                    <Card className=\"mb-3\" style={{color: \"#000\"}}>\n                        <Card.Body>\n                            <div className=\"botCommentary\">\n                                <Card.Title>What You Said:</Card.Title>\n                                {\n                                    Object.keys(userHistory).map(key => {\n                                        const choice = userHistory[key];\n                                        return (\n                                            <div>\n                                                <Card.Text>{userHistory[key]}</Card.Text>\n                                            </div>\n                                        );\n                                    })\n                                }                  \n                            </div>\n                        </Card.Body>\n                    </Card>\n                    </Col>\n                        <Col>\n                        <Card className=\"mb-3\" style={{color: \"#000\"}}>\n                            <div>\n                                <Card.Body>\n                                    <Card.Title>My Thoughts:</Card.Title>\n                                        {\n                                        Object.keys(commentary).map(key => {\n                                            const choice = commentary[key];\n                                            return (\n                                                <div>\n                                                    <Card.Text>{commentary[key]}</Card.Text>\n                                                </div>\n                                            );\n                                        })\n                                        }\n                                </Card.Body>\n                            </div>\n                        </Card>\n                        </Col>\n                        <Col>\n                        <Card className=\"mb-3\" style={{color: \"#000\"}}>\n                            <div>\n                                <Card.Body>\n                                    <Card.Title>IBM Watson's Thoughts:</Card.Title>\n                                        <Card.Text>IBM Data</Card.Text>\n                                </Card.Body>\n                            </div>\n                        </Card>\n                        </Col>\n                    </Row>\n                </Container>\n                <Container>\n                    <Row>\n                    <Col xs={12}></Col>\n                        <Col xs={{order: 12}}>\n                            <Button className=\"reset\" onClick={this.handleClickReset}>Reset</Button>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        ) // return\n    } // render\n}; // class PlayerChat\n\nexport default PlayerChat;","import React from 'react';\nimport '../index.css';\nimport PlayerChat from './PlayerChat';\n\n// Bootstrap\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n\n\n\nclass ConvoApp extends React.Component {\n\n\n    render() {\n  \n      return (\n        <div>\n          <Container>\n            <Row>\n              <Col sm={7}>\n              <header>\n                <h1>Convo</h1>\n                <h4>Practice networking conversations on the fly</h4>\n              </header>\n              </Col>\n\n              <div className=\"chat\" >\n                <PlayerChat scenarioTrees={this.props.scenarioTrees.tutorial}/>\n              </div>\n            </Row>\n              <footer>\n                <hr />\n                Created by Alistair Gray 2021 <strong>|</strong> Styled using Bootstrap <strong>|</strong> Watson Interpretation by IBM Watson\n              </footer>\n              \n            </Container>\n        \n        </div>\n      )\n    }\n};\n\nexport default ConvoApp;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ConvoApp from './components/ConvoApp';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n// import '../App.scss'\n\nimport reportWebVitals from './reportWebVitals';\n\n// Source Decision Tree for Conversation Flows - this contains a series of conversations\nconst scenarioTrees = {\n  tutorial: {\n      A: {\n        userStatement: 'Hi there',\n        botResponse: 'Hi',\n        commentary: 'This is quite a neutral approach',\n          AA: {\n            userStatement: 'My name is Theodore',\n            botResponse: \"Hi Theodore, I'm Samantha\",\n            commentary: \"You're continuing with a neutral tone\",\n              AAA: {\n                userStatement: 'What brings you to this event?',\n                botResponse: \"I'm here to meet people and learn\",\n                commentary: \"The conversation so far is still like an interview\"\n              },\n              AAB: {\n                userStatement: 'userStatementAAB',\n                botResponse: 'responseAAB',\n                commentary: ''\n              }\n          }, // AA\n          AB: {\n            userStatement: 'What brings you to this event?',\n            botResponse: \"I'm here to meet people and learn\",\n            commentary: '',\n              ABA: {\n                userStatement: 'userStatementABA',\n                botResponse: 'responseABA',\n                commentary: ''\n              },\n              ABB: {\n                userStatement: 'userStatementABB',\n                botResponse: 'responseABB',\n                commentary: ''\n              } // ABB\n            } // AB\n        }, // A\n\n      B: {\n        userStatement: \"Hi I thought I would come over and introduce myself, I'm Theodore\",\n        botResponse: \"Nice to meet you, I'm Samantha\",\n        commentary: '',\n          BA: {\n            userStatement: 'userStatementBA',\n            botResponse: 'responseBA',\n            commentary: '',\n              BAA: {\n                userStatement: 'userStatementBAA',\n                botResponse: 'responseBAA',\n                commentary: ''\n              },\n              BAB: {\n                userStatement: 'userStatementBAB',\n                botResponse: 'responseBAB',\n                commentary: ''\n              }\n          }, // BA\n          BB: {\n            userStatement: 'userStatementBB',\n            botResponse: 'responseBB',\n            commentary: '',\n              BBA: {\n                userStatement: 'userStatementBBA',\n                botResponse: 'responseBBA',\n                commentary: ''\n              },\n              BBB: {\n                userStatement: 'userStatementBBB',\n                botResponse: 'responseBBB',\n                commentary: ''\n              } // BBB\n          } // BB\n      } // B\n    } // Tutorial\n  }; // scenarioTrees\n\nReactDOM.render(\n    <ConvoApp scenarioTrees={scenarioTrees} />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}