[{"/home/alistairgray/sei/homework/alistair_gray/projects/convo/co-react-frontend/src/index.js":"1","/home/alistairgray/sei/homework/alistair_gray/projects/convo/co-react-frontend/src/App.js":"2","/home/alistairgray/sei/homework/alistair_gray/projects/convo/co-react-frontend/src/reportWebVitals.js":"3","/home/alistairgray/sei/homework/alistair_gray/projects/convo/co-react-frontend/src/components/ConvoApp.js":"4","/home/alistairgray/sei/homework/alistair_gray/projects/convo/co-react-frontend/src/components/PlayerChat.js":"5"},{"size":3191,"mtime":1612410940209,"results":"6","hashOfConfig":"7"},{"size":528,"mtime":1612061778038,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1612061778042,"results":"9","hashOfConfig":"7"},{"size":1043,"mtime":1612399228412,"results":"10","hashOfConfig":"7"},{"size":7101,"mtime":1612410364561,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1gkfrs5",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},"/home/alistairgray/sei/homework/alistair_gray/projects/convo/co-react-frontend/src/index.js",[],["25","26"],"/home/alistairgray/sei/homework/alistair_gray/projects/convo/co-react-frontend/src/App.js",[],"/home/alistairgray/sei/homework/alistair_gray/projects/convo/co-react-frontend/src/reportWebVitals.js",[],"/home/alistairgray/sei/homework/alistair_gray/projects/convo/co-react-frontend/src/components/ConvoApp.js",[],"/home/alistairgray/sei/homework/alistair_gray/projects/convo/co-react-frontend/src/components/PlayerChat.js",["27","28","29","30","31","32"],"import React from 'react';\nimport '../index.css';\n\n// Bootstrap\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\n\nconst BASE_URL = 'http://localhost:3001/watson'\n\n\nclass PlayerChat extends React.Component {\n    \n    state = {\n        botResponse: 'Samantha.AI is helping itself to a cup of coffee when you approach...',\n        userHistory: [],\n        botHistory: [],\n        currentBranch: this.props.scenarioTrees,\n        commentary: [],\n        watson: []\n      }\n   \n       userChoice = (userChoice) => {\n            \n            const scenario = this.props.scenarioTrees;\n\n            this.setState({\n                userHistory: [...this.state.userHistory, this.state.currentBranch[userChoice].userStatement],\n                currentBranch: this.state.currentBranch[userChoice],\n                botResponse: this.state.currentBranch[userChoice].botResponse,\n                commentary: [...this.state.commentary, this.state.currentBranch[userChoice].commentary]\n            });\n\n            // perform an axios via a fetch function\n            // fetchWatson = () => {\n            //     axios.get(BASE_URL,{\n            //         params: 'this is a test string'\n            //     })\n            //     .then(res => {\n            //         // create a variable that extracts the json data, convert to strings and then set the state\n            //         this.setState({\n            //             watson: [...this.state.watson, //variable]\n            //         })\n            //     })\n            // };\n\n        } // userChoice()\n\n        handleClickReset = (ev) => {\n            ev.preventDefault();\n            this.setState({botResponse: 'Samantha.AI is helping itself to a cup of coffee when you approach...'});\n            this.setState({userHistory: []});\n            this.setState({botHistory: []});\n            this.setState({currentBranch: this.props.scenarioTrees});\n            this.setState({commentary: []});\n        };\n\n\n    render(){\n\n        const {userHistory, currentBranch, botHistory, commentary} = this.state\n\n        return(\n            <div>\n                <Container>\n                    <Row>\n                        <Col>\n                        <div className=\"chatBox\">\n                            <div className=\"botChat\">\n                                \n                                <h3>Samantha.AI will respond to your statements</h3>\n                            </div>\n                            <Card className=\"mb-3\" style={{color: \"#000\", paddingTop: \"1%\", paddingLeft: \"1%\", color: \"#6610f2\", fontSize: \"14pt\"}}>\n                            <div className=\"botResponse\">\n                                <p>{this.state.botResponse}</p>\n                            </div>\n                            </Card>\n                        </div>\n                        </Col>\n                    </Row>\n                    <Row>\n                    <Col>\n                    <div className=\"playerChat\">\n                        <Card className=\"mb-3\" style={{color: \"#000\"}}>\n                            <Card.Body>\n                                <Card.Title>\n                                    Choose what you think is the right thing to say:\n                                </Card.Title>\n                            \n                        <div className=\"playerChoices\">\n                            {\n                                Object.keys(currentBranch).map(key => {\n                                    const choice = currentBranch[key];\n                                    return (\n                                        <div onClick={() => this.userChoice(key)}>\n                                            <Card.Text><p>{choice.userStatement}</p></Card.Text>\n                                        </div>\n                                    );\n                                })\n                            }\n                            </div>        \n                        </Card.Body>\n                        </Card>\n                      </div>\n                    </Col>\n                    <Col>\n                    <Card className=\"mb-3\" style={{color: \"#000\"}}>\n                        <Card.Body>\n                            <div className=\"botCommentary\">\n                                <Card.Title>What You Said:</Card.Title>\n                                {\n                                    Object.keys(userHistory).map(key => {\n                                        const choice = userHistory[key];\n                                        return (\n                                            <div>\n                                                <Card.Text>{userHistory[key]}</Card.Text>\n                                            </div>\n                                        );\n                                    })\n                                }                  \n                            </div>\n                        </Card.Body>\n                    </Card>\n                    </Col>\n                        <Col>\n                        <Card className=\"mb-3\" style={{color: \"#000\"}}>\n                            <div>\n                                <Card.Body>\n                                    <Card.Title>My Thoughts:</Card.Title>\n                                        {\n                                        Object.keys(commentary).map(key => {\n                                            const choice = commentary[key];\n                                            return (\n                                                <div>\n                                                    <Card.Text>{commentary[key]}</Card.Text>\n                                                </div>\n                                            );\n                                        })\n                                        }\n                                </Card.Body>\n                            </div>\n                        </Card>\n                        </Col>\n                        <Col>\n                        <Card className=\"mb-3\" style={{color: \"#000\"}}>\n                            <div>\n                                <Card.Body>\n                                    <Card.Title>IBM Watson's Thoughts:</Card.Title>\n                                        <Card.Text>IBM Data</Card.Text>\n                                </Card.Body>\n                            </div>\n                        </Card>\n                        </Col>\n                    </Row>\n                </Container>\n                <Container>\n                    <Row>\n                    <Col xs={12}></Col>\n                        <Col xs={{order: 12}}>\n                            <Button className=\"reset\" onClick={this.handleClickReset}>Reset</Button>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        ) // return\n    } // render\n}; // class PlayerChat\n\nexport default PlayerChat;",["33","34"],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":11,"column":7,"nodeType":"41","messageId":"42","endLine":11,"endColumn":15},{"ruleId":"39","severity":1,"message":"43","line":27,"column":19,"nodeType":"41","messageId":"42","endLine":27,"endColumn":27},{"ruleId":"39","severity":1,"message":"44","line":63,"column":44,"nodeType":"41","messageId":"42","endLine":63,"endColumn":54},{"ruleId":"45","severity":1,"message":"46","line":75,"column":112,"nodeType":"47","messageId":"48","endLine":75,"endColumn":117},{"ruleId":"39","severity":1,"message":"49","line":115,"column":47,"nodeType":"41","messageId":"42","endLine":115,"endColumn":53},{"ruleId":"39","severity":1,"message":"49","line":134,"column":51,"nodeType":"41","messageId":"42","endLine":134,"endColumn":57},{"ruleId":"35","replacedBy":"50"},{"ruleId":"37","replacedBy":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'BASE_URL' is assigned a value but never used.","Identifier","unusedVar","'scenario' is assigned a value but never used.","'botHistory' is assigned a value but never used.","no-dupe-keys","Duplicate key 'color'.","ObjectExpression","unexpected","'choice' is assigned a value but never used.",["52"],["53"],"no-global-assign","no-unsafe-negation"]